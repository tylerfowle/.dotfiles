#!/usr/bin/env bash
ProgName="$(basename $0)"
ProgVersion="0.0.1"
cacheFile=cashier.cache.log
logFile=cashier.npm.log
IFS=$'\n'
startTime=$(date +%s)

sub_list() {
  find "${1:-.}" -type f -name "$cacheFile"
}

sub_clean() {
  find "${1:-.}" -type f -name "$cacheFile" -exec rm {} \;
  find "${1:-.}" -type f -name "$logFile" -exec rm {} \;
}

run_script() {
  (
  if [ -d "$1" ]; then
    cd "$1"
  fi

  if [ -f package.json ]; then
    npm run build > "$logFile"
    date +%s > "$cacheFile"
  fi
  )
}

sub_build(){
  basePath="${1:-$PWD}"
  modified=false
  isCDN=false
  isParent=false
  isDesign=false

  elapsedTime=$(( $(date +%s) - $startTime ))
  echo "$elapsedTime - basePath: $basePath"

  if [[ "${basePath##*/}" == "cdn" ]]; then
    isCDN=true
  elif [[ "${basePath##*/}" =~ designs|layouts|subdesigns ]]; then
    isParent=true
  else
    isDesign=true
  fi

  # echo "isCDN: $isCDN"
  # echo "isParent: $isParent"
  # echo "isDesign: $isDesign"

  if [ "$isCDN" == true ]; then
    for d in "$basePath"/designs/*/; do
      (
      sub_build "$d"
      )
    done

    for l in "$basePath"/layouts/*/; do
      (
      sub_build "$l"
      )
    done
  fi

  if [ "$isParent" == true ]; then
    for d in "$basePath"/*/; do
      (
      sub_build "$d"
      )
    done
  fi

  # skip if no package.json
  if [ ! -f "$basePath"/package.json ]; then
    return
  fi

  # check if cache file exists
  if [ ! -f "$basePath"/"$cacheFile" ]; then
    echo ">> create cache"
    run_script "$basePath"
    exit
  fi

  cacheTime=$(cat "$basePath"/"$cacheFile")
  allFiles=$(find "$basePath" -type f -name "*" -not -name "*.log" -not -name "*.lock" -not -path "**/subdesigns/*")

  for f in $allFiles; do
    echo -ne "\r\033[K$elapsedTime - $f"
    fileTime=$(date -r "$f" +%s)

    # compare last modified time to time in cache
    if [ "$fileTime" -gt "$cacheTime" ]; then
      echo ""
      echo "modified: $f"
      modified=true
    fi
  done
  echo -ne "\r\033[K"

  if [ "$modified" = true ]; then
    echo "$elapsedTime - >> modified"
    run_script "$basePath"
  fi

}




# boilerplate below

# print the name & version
sub_version(){
  echo "$ProgName $ProgVersion"
}

# help
sub_help(){
  printf "$ProgName $ProgVersion\n\n"
  printf "Usage:\n"
  printf "\t$ProgName <subcommand> [options]\n\n"
  printf "Subcommands:\n"

  print_columns "help,--help,-h" "display this help"
  print_columns "version,--version,-v" "display the version information"
  print_columns "[command_name]" "run the [command_name]"
  printf "\n"
}

print_columns(){
  printf "\t%-30s %-30s\n" "$1" "$2"
}

subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  "-v" | "--version")
    sub_version
    ;;
  *)
    shift
    sub_${subcommand} $@
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo "       Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac

