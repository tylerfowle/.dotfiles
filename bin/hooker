#!/usr/bin/env bash

ProgName="$(basename $0)"
ProgVersion="0.0.1"

dbPath=~/.hooker/
dbFile=hooker.db

filedb="./filedb"

# add_pre_hook(){}
# add_post_hook(){}

# delete_pre_hook(){}
# delete_post_hook(){}

sub_set(){
  mkdir -p $dbPath
  touch $dbPath$dbFile
  cat > $dbPath$dbFile << EOF
{
"$1": {
  "path": "$(dirname $PWD)",
  "pre": "$2",
  "post": "$3"
}
}
EOF
}
sub_get(){
  echo "get"
}


sub_pre(){
  echo "pre hook"
}

sub_main(){
  sub_pre
  dt $1
  sub_post
}

sub_post(){
  echo "post hook"
}

# print the name & version
sub_version(){
  echo "$ProgName $ProgVersion"
}

# help
sub_help(){
  printf "$ProgName $ProgVersion\n\n"
  printf "Usage:\n"
  printf "\t$ProgName <subcommand> [options]\n\n"
  printf "Subcommands:\n"

  print_columns "help,--help,-h" "display this help"
  print_columns "version,--version,-v" "display the version information"

  printf "\n"
}

print_columns(){
  printf "\t%-30s %-30s\n" "$1" "$2"
}

subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  "-v" | "--version")
    sub_version
    ;;
  *)
    shift
    sub_${subcommand} $@
    if [ $? = 127 ]; then
      echo "Error: '$subcommand' is not a known subcommand." >&2
      echo "       Run '$ProgName --help' for a list of known subcommands." >&2
      exit 1
    fi
    ;;
esac
