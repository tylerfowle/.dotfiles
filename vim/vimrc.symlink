" check whether vim-plug is installed and install it if necessary "
let plugpath = expand('<sfile>:p:h'). '/autoload/plug.vim'
if !filereadable(plugpath)
  if executable('curl')
    let plugurl = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    call system('curl -fLo ' . shellescape(plugpath) . ' --create-dirs ' . plugurl)
    if v:shell_error
      echom "Error downloading vim-plug. Please install it manually.\n"
      exit
    endif
  else
    echom "vim-plug not installed. Please install it manually or install curl.\n"
    exit
  endif
endif


" ====================================================================================================== "
" start plugins "
call plug#begin('~/.vim/plugged')

" colorscheme "
Plug 'joshdick/onedark.vim'
Plug 'chriskempson/base16-vim'
Plug 'colepeters/spacemacs-theme.vim'
Plug 'exitface/synthwave.vim'

" utilities "
Plug 'vim-airline/vim-airline' " fancy statusline "
Plug 'vim-airline/vim-airline-themes'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'neomake/neomake' " neovim replacement for syntastic using neovim's job control functonality "

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-repeat' " enables repeating other supported plugins with the . command "
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'ervandew/supertab' " Perform all your vim insert mode completions with Tab "
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } 
Plug 'Xuyuanp/nerdtree-git-plugin' 
Plug 'ryanoasis/vim-devicons' " file drawer "

Plug 'ervandew/supertab'

" Auto close tags
Plug 'raimondi/delimitmate'

" Shows a git diff in the gutter (sign column) and stages/undoes hunks. "
Plug 'airblade/vim-gitgutter'

" This plugin causes all trailing whitespace to be highlighted in red. "
Plug 'bronson/vim-trailing-whitespace'

" Custom bundles "
Plug 'michalliu/sourcebeautify.vim'

" Display the indention levels with thin vertical lines "
Plug 'Yggdroot/indentLine'

Plug 'valloric/youcompleteme'

" HTML
Plug 'vim-scripts/HTML-AutoCloseTag'

" html / templates "
Plug 'mattn/emmet-vim'
Plug 'marcweber/vim-addon-mw-utils' " interpret a file by function and cache file automatically - snipmate dependancies "
Plug 'tomtom/tlib_vim' " utility functions for vim "
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

" scss "
Plug 'cakebaker/scss-syntax.vim'

Plug 'scrooloose/syntastic'



call plug#end()
" end plugins "
" ====================================================================================================== "


" options "
" dont be compatible with vi "
set nocompatible
" enable syntax colors "
syntax enable

filetype plugin on
set tabstop=4
set shiftwidth=2
set expandtab

" for searching "
set path+=
set wildmenu

" show current command in bottom right "
set showcmd

" show line numbers and use relative lines "
set number
set relativenumber

" enable mouse for scrolling =================================================== "
set mouse=a

" override terminal colors =================================================== "
set t_Co=256

set laststatus=2

" Lightline recommended settings =================================================== "
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Syntastic ================================ "
let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_auto_loc_list=1
let g:syntastic_aggregate_errors = 1


" airline options ================================ "
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='synthwave'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0

" colorscheme =================================================== "
set background=dark
colorscheme synthwave

if has('termguicolors')
  set termguicolors " 24-bit terminal
else
  let g:synthwave_termcolors=256 " 256 color mode
endif


" NERDTree settings =================================================== "
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'

" ctrl p settings =================================================== "
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'


" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
" call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
" call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
" call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
" call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
" call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
" call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
" call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
" call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
" call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
" call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
" call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
" call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')




" ============================================= "
" Leader Mappings ============================= "
" ============================================= "

" set a map leader for more key combos "
let mapleader = ','

" shortcut to save "
nmap <leader>, :w<cr>

" clear highlighted search term, but keep in register
nnoremap <leader><esc> :noh<cr>

" select all and yank
map <leader>a :%y+<cr>

" CtrlP ============================= "
" search through tags and jump to file with with ctrl-p
nnoremap <leader>t :CtrlPTag<cr>
" search buffers
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>f :CtrlP<cr>

" Set working directory
nnoremap <leader>. :lcd %:p:h<cr>


" ============================================= "
" Custom Mappings ============================= "
" ============================================= "

" FZF Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" FZF Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" scroll the viewport faster "
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" copy to clipboard
noremap YY "+y<CR>

" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>x :bn<CR>
nnoremap <space>b :Buffers<cr>
nnoremap <space>f :Files<cr>

" Emmet remap
let g:user_emmet_leader_key='<tab>'
