" Tyler Fowle

" Plugins {{{
" ========================================================================================================
call plug#begin('~/.vim/plugged')
" Colorscheme {{{
Plug 'exitface/synthwave.vim'
Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
" }}}
" UI {{{
Plug 'nathanaelkane/vim-indent-guides' " indent guides
Plug 'vim-airline/vim-airline'         " fancy statusline
Plug 'vim-airline/vim-airline-themes'  " themes for airline
Plug 'airblade/vim-gitgutter'          " Shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'junegunn/vim-peekaboo'           " shows registers in a sidebar
" }}}
" Utilities {{{
Plug 'ctrlpvim/ctrlp.vim'              " fuzzy file, buffer, mru, tag finder
Plug 'junegunn/vim-easy-align'         " ga to align by character
Plug 'tpope/vim-repeat'                " enables repeating other supported plugins with the . command
Plug 'tpope/vim-surround'              " ysiw to surround word
Plug 'tpope/vim-commentary'            " easy commenting
Plug 'tpope/vim-fugitive'              " git wrapper
Plug 'tpope/vim-rhubarb'               " hub wrapper for fugitive / github
Plug 'raimondi/delimitmate'            " Auto close tags
Plug 'bronson/vim-trailing-whitespace' " This plugin causes all trailing whitespace to be highlighted in red.
Plug 'google/vim-searchindex'          " show search position among all results
Plug 'triglav/vim-visual-increment'    " use ctrl a/v to increment.decrement a visually selected block
Plug 'mileszs/ack.vim'                 " ack for vim - replaces vimgrep
Plug 'brooth/far.vim'                  " find and replace with :Far foo bar **/*.scss -then- :Fardo
Plug 'wakatime/vim-wakatime'           " time tracker
Plug 'floobits/floobits-neovim'        " floobits - collaborative editing
Plug 'tylerfowle/turtle.vim'           " quickly add header comments
" }}}
" Syntax Engines {{{
Plug 'w0rp/ale'
" }}}
" Syntax support {{{
Plug 'othree/html5.vim'                                       " html5 syntax
Plug 'othree/javascript-libraries-syntax.vim'                 " javascript libary syntax (jquery)
Plug 'pangloss/vim-javascript'                                " javascript syntax
Plug 'cakebaker/scss-syntax.vim'                              " scss syntax
Plug 'lumiliet/vim-twig'                                      " twig syntax
Plug 'tmux-plugins/vim-tmux'                                  " tmux syntax
Plug 'jtratner/vim-flavored-markdown'                         " markdown syntax
Plug 'shime/vim-livedown'                                     " live markdown preview 'npm install -g livedown
Plug 'davidoc/taskpaper.vim'                                  " .taskpaper syntax
" }}}
" Languages {{{
Plug 'fatih/vim-go'
" }}}
" NERDTree {{{
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }    " visual file explorer
Plug 'Xuyuanp/nerdtree-git-plugin'                                          " git changes for nerdtree
Plug 'ryanoasis/vim-devicons'                                               " file icons for nerdtree
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'                              " syntax highlighting for nerdtree
" }}}
" Auto Complete {{{
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Autocompletion engine
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'mattn/emmet-vim'                                        " html / templates
Plug 'ervandew/supertab'                                      " Perform all your vim insert mode completions with Tab
" }}}
" Snippets {{{
Plug 'sirver/ultisnips'                                       " snippet engine
Plug 'honza/vim-snippets'                                     " collection of snippets
" }}}


call plug#end()
" ========================================================================================================
" }}}
" General Config {{{
syntax enable             " enable syntax processing
filetype plugin on        " load filetype-specific indent files
filetype indent on
set encoding=utf8         " set encoding
set t_Co=256              " explicitly tell vim that the terminal supports 256 colors
set ttyfast               " faster redrawing
set tags=tags;
set iskeyword+=-          " include - in keyword matching
" }}}
" Autocommands & Commands {{{

" regenerate ctags on save
" autocmd BufWritePre * silent! !ctags -R --exclude={.git,node_modules,bower_components} . >/dev/null 2>&1

" install finter after saving
autocmd BufWritePost finter.rb !./install
autocmd BufWritePost *.rb silent! !bundle exec rake install

" python formatting
augroup python
  au!
  au BufNewFile,BufRead silent! *.py
  setlocal tabstop=4
  setlocal softtabstop=4
  setlocal shiftwidth=4
  setlocal textwidth=79
  setlocal expandtab
  setlocal autoindent
  setlocal fileformat=unix
augroup END

" auto reload file when changed on disk
set updatetime=750
au CursorHold,FocusGained,BufEnter * checktime

" set the foldmethod to syntax for css and scss files
au FileType css,scss setlocal foldmethod=syntax

" go commands
augroup goWatcher
  au!
  au BufWritePre *.go :GoImports
  au BufWritePre *.go silent! :GoBuild
  au BufWritePre *.go silent! :!go build
augroup END

" use github flavored markdown syntax by default
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" use taskpaper filetype for .taskpaper.txt files
augroup taskpaper
  au! BufRead,BufNewFile *.taskpaper.txt setlocal filetype=taskpaper
augroup END

" prettydiff current file
command! PrettyDiff call PrettyDiffer()
function! PrettyDiffer()
  silent :!prettydiff %
endfunction

" open current buffer in chrome
command! -nargs=? Chrome call Chromer(<f-args>)
function! Chromer(...)
  if a:0 < 1
    silent :!open % -a Google\ Chrome
  else
    silent :exec  '!open /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --args --app=' . a:1
  endif
endfunction
" }}}
" Spaces & Tabs {{{
set tabstop=4             " number of visual spaces per TAB
set shiftwidth=2          " number of spaces to use for indent and unindent
set expandtab             " tabs are spaces
" }}}
" UI {{{

set nowrap                     " dont wrap long lines
set hidden                     " hide buffers, dont unload them, this fixes losing syntax on buffer change
set number                     " show line numbers
set relativenumber             " use relative lines
set title                      " show file name in window title
set cursorline                 " highlight line with cursor
set showmatch                  " show matching brackets
set matchpairs+=<:>            " make < and > match as well
set mouse=a                    " enable mouse for scrolling
set showcmd                    " show current command in bottom right
set laststatus=2               " always show airline
set wildmenu                   " visual autocomplete for command menu
set wildcharm=<TAB>            " auto completetion hotkey
set wildignore+=node_modules/* " ignore node modules
" set lazyredraw                 " redraw only when we need to
set list                       " show invisible characters
set listchars=tab:→\ ,trail:⋅  " list chars
set fillchars=vert:│           " set vert split character to taller line
let g:netrw_gx="<cWORD>"       " use whole words when opening URLs.



" make comments italic
autocmd ColorScheme * highlight Comment gui=italic

" change vert slpit color to same as iterm2
" the use of autocmd guarantees that it will override color scheme
autocmd ColorScheme * hi VertSplit cterm=NONE guifg=#686868

" }}}
" Splits {{{
set splitbelow   " open new splits to bottom
set splitright   " open new splits to right
" }}}
" Searching {{{
set ignorecase   " ignore case in search patterns
set smartcase    " override the 'ignorecase' option if the search pattern contains upper case characters
set incsearch    " search as characters are entered
set hlsearch     " highlight matches
" }}}
" Indenting {{{
set autoindent   " automatically set indent of new line
set smartindent  " do smart autoindenting when starting a new line
" }}}
" Folding {{{
set foldenable        " enable folding
set foldmethod=indent " fold based on indent level
set foldlevel=10      " open most folds by default
set foldnestmax=10    " 10 nested fold max





set foldclose=all
" }}}
" Misc {{{
set autoread    " auto reload changed files
set modelines=1 " check the last line for file specific settings
set path+=      " for searching
" }}}

" netrw {{{

let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25

" }}}
" Deoplete {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
" make deoplete with with ultisnips
call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
" }}}
" UltiSnips  {{{

" set default shortcut
let g:UltiSnipsExpandTrigger='<tab>'

" load custom snippets location
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
let g:UltiSnipsEditSplit='vertical'
" }}}
" SuperTab  {{{
let g:SuperTabDefaultCompletionType = "<c-n>"
" let g:SuperTabContextDefaultCompletionType = "<c-n>"
" }}}
" Airline {{{
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
" let g:airline_theme='synthwave'
" let g:airline_theme='onedark'
" let g:airline_theme='solarized'
let g:airline_theme='gruvbox'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}
" Wakatime {{{
let g:wakatime_ScreenRedraw = 1
" }}}

" colorscheme {{{
set background=dark

" gruvbox setup
colorscheme gruvbox

" set custom background color
hi Normal guibg=#221926

if has('termguicolors')
  set termguicolors " 24-bit terminal
endif

" customize matching paren colors
hi MatchParen guifg='#2b303b' guibg='#bd626b'

" }}}

" Livedown - markdown preview {{{
nnoremap <C-m> :LivedownToggle<CR>
let g:instant_markdown_autostart = 0
" }}}
" NERDTree  {{{
map <C-n> :NERDTreeToggle<CR><c-w>=
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'
" Disable bookmarks label, and hint about '?'
let NERDTreeMinimalUI=1
" colorize full name in addition to icon
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeIgnore = ['\.DS_Store$','node_modules','\~$']
" }}}
" CtrlP {{{
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\/'
" }}}
" indent guides {{{
let g:indend_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 0
" }}}
" DelimitMate {{{

if has('nvim')
  let delimitMate_expand_cr = 1
endif
let delimitMate_expand_space = 1
" }}}
" Ack  {{{



" }}}

" General Shortcuts {{{

" make Y function like C and D
" Y(ank) not linewise
map Y y$

" remap emmet expand
imap hh <C-y>,

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" B and E for faster beginning and end
nnoremap B ^
nnoremap E $

" o and O will not continue comments
" nnoremap o o<Esc>^Da
" nnoremap O O<Esc>^Da

" swap directions of { and } to match up with j and k
" this is specific to my keyboard layout
nnoremap { }
nnoremap } {

" copy to clipboard
noremap YY "+y<CR>

" insert line below
nnoremap <CR><CR> o<Esc>

" redraw vim
nnoremap <C-z> :redraw!<cr>

" show tagbar
nnoremap <c-b> :TagbarToggle<cr>

" }}}
" Leader Shortcuts {{{

" set a map leader for more key combos
let mapleader = ','
let maplocalleader = ' '

" :Ack - find in all
" trailing space is intentional!
nnoremap <leader>gg :Ack 

" turtle.vim comment header
nnoremap <leader>c :Commentr<cr>

" maximize current pane, make all panes equal size
nnoremap <leader>M <C-W>\|<C-W>_
nnoremap <leader>m <C-W>=

" sassvars
nnoremap <leader>gs :e sassvars.scss<CR>:r !grep -Rh "\$\S*:" ./**/*.scss<CR>:noh<CR>

" quick quit all
nnoremap <leader>q :qa<cr>

" shortcut to save
nmap <leader>, :w<cr>

" open current dir in finder
nmap <leader>o :!open .<cr>

" run savesite in current dir
nmap <silent> <leader>k :silent !savesite<cr> :redraw!<cr>

" super save - save session in its current state, open agian with `vim -S`
nnoremap <leader>s :mksession!<CR>

" clear highlighted search term, but keep in register
nnoremap <leader><esc> :noh<cr>

" select all and copy to clipboard
nmap <leader>a :%y+<cr>

" search through tags and jump to file with with ctrl-p
nnoremap <leader>tf :CtrlPTag<cr>
" search buffers
nnoremap <leader>bf :CtrlPBuffer<cr>
" search mru
nnoremap <leader>d :CtrlPMRU<cr>
" additional shortcut for default
nnoremap <leader>f :CtrlP<cr>

" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>x :bn<CR>

" close current buffer but not current window
noremap <leader>bd :bp<bar>sp<bar>bn<bar>bd<CR>

" reload vimrc file
nnoremap <leader>! :so $MYVIMRC<cr>

" reindent entire file
" mark cursor and put cursor back, center cursor in window
nnoremap <leader>r magg=G`azz

" mark cursor, close buffer, create new pane, open mark
nnoremap <leader>gt mAZZ<C-w>v`A

" leader w, for pane control
nnoremap <leader>w <C-w>
" focus splits with ctrl + direction
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Set working directory
nnoremap <leader>. :lcd %:p:h<cr>

" Display current file in the NERDTree ont the left
nmap <silent> <leader>n :NERDTreeFind<CR><c-w>=

" open v split
nmap <leader>v :vsp<cr>
" open h split
nmap <leader>h :sp<cr>

" }}}
" Tag Shortcuts {{{

" search tag under cursor
nnoremap tt <c-]>zz
" go back to definition
nnoremap tb <c-t>
" go to next tag
nnoremap tn :tn<cr>
" go to previous tag
nnoremap tp :tp<cr>
" }}}
" Terminal Shortcuts {{{

if has('nvim')
  " make esc work like other modes
  tnoremap <Esc> <C-\><C-n>
  " nav splits like normal
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l
endif

" }}}

" Abbreviations {{{
abbr marign margin
abbr widht width
abbr iamges images
" }}}
