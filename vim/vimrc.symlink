" Tyler Fowle

" Plugins {{{
" ========================================================================================================
call plug#begin('~/.vim/plugged')
" Colorscheme {{{
" Plug 'exitface/synthwave.vim'
Plug 'morhetz/gruvbox'
" }}}
" UI {{{
Plug 'nathanaelkane/vim-indent-guides', {'on': ['IndentGuidesToggle','IndentGuidesOn']}      " indent guides
Plug 'vim-airline/vim-airline'                                                               " fancy statusline
Plug 'vim-airline/vim-airline-themes'                                                        " themes for airline
Plug 'airblade/vim-gitgutter'                                                                " Shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'junegunn/vim-peekaboo'                                                                 " shows registers in a sidebar
" }}}
" Utilities {{{
Plug 'ctrlpvim/ctrlp.vim'                                                                    " fuzzy file, buffer, mru, tag finder
Plug 'ton/vim-bufsurf'                                                                       " Navigate buffers based on history, like browser windows
Plug 'junegunn/vim-easy-align'                                                               " ga to align by character
Plug 'tpope/vim-repeat'                                                                      " enables repeating other supported plugins with the . command
Plug 'tpope/vim-surround'                                                                    " ysiw to surround word
Plug 'tpope/vim-commentary'                                                                  " easy commenting
Plug 'tpope/vim-fugitive'                                                                    " git wrapper
Plug 'raimondi/delimitmate'                                                                  " Auto close tags
Plug 'bronson/vim-trailing-whitespace'                                                       " This plugin causes all trailing whitespace to be highlighted in red.
Plug 'google/vim-searchindex'                                                                " show search position among all results
Plug 'markonm/traces.vim'                                                                    " highlight patterns and ranges for Ex commands
Plug 'triglav/vim-visual-increment'                                                          " use ctrl a/v to increment.decrement a visually selected block
Plug 'mileszs/ack.vim'                                                                       " ack for vim - replaces vimgrep
Plug 'brooth/far.vim'                                                                        " find and replace with :Far foo bar **/*.scss -then- :Fardo
Plug 'wakatime/vim-wakatime'                                                                 " time tracker
Plug 'tylerfowle/turtle.vim'                                                                 " quickly add header comments
Plug 'AndrewRadev/switch.vim'                                                                " switch boolean values with gs
if has('nvim')
  Plug 'floobits/floobits-neovim'                                                            " floobits - collaborative editing
endif
" }}}
" Syntax Engines {{{
Plug 'w0rp/ale'
" }}}
" Syntax support {{{
Plug 'othree/html5.vim'                                                                      " html5 syntax
Plug 'othree/javascript-libraries-syntax.vim'                                                " javascript libary syntax (jquery)
Plug 'pangloss/vim-javascript'                                                               " javascript syntax
Plug 'JulesWang/css.vim'                                                                     " css syntax
Plug 'cakebaker/scss-syntax.vim'                                                             " scss syntax
Plug 'lumiliet/vim-twig'                                                                     " twig syntax
Plug 'plasticboy/vim-markdown'                                                               " markdown syntax
Plug 'shime/vim-livedown'                                                                    " live markdown preview 'npm install -g livedown
Plug 'davidoc/taskpaper.vim'                                                                 " .taskpaper syntax
Plug 'junegunn/vim-journal'                                                                  " syntax for plain text notes, similiar to markdown
" }}}
" Languages {{{
Plug 'fatih/vim-go'
" }}}
" NERDTree {{{
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }                     " visual file explorer
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }             " git changes for nerdtree
Plug 'ryanoasis/vim-devicons', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }                  " file icons for nerdtree
Plug 'tiagofumo/vim-nerdtree-syntax-highlight', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } " syntax highlighting for nerdtree
" }}}
" Auto Complete {{{
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }                              " Autocompletion engine
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'mattn/emmet-vim'                                                                       " html / templates
Plug 'ervandew/supertab'                                                                     " Perform all your vim insert mode completions with Tab
" }}}
" Snippets {{{
Plug 'sirver/ultisnips'                                                                      " snippet engine
Plug 'honza/vim-snippets'                                                                    " collection of snippets
" }}}


call plug#end()
" ========================================================================================================
" }}}
" General Config {{{
syntax enable             " enable syntax processing
filetype plugin on        " load filetype-specific indent files
filetype indent on
set encoding=utf8         " set encoding
set t_Co=256              " explicitly tell vim that the terminal supports 256 colors
set ttyfast               " faster redrawing
set tags=tags;
set iskeyword+=-          " include - in keyword matching
" }}}
" Autocommands & Commands {{{

" install ruby after saving
autocmd BufWritePost *.rb silent! !bundle exec rake install

" python formatting
augroup python
  au!
  au BufNewFile,BufRead silent! *.py
  setlocal tabstop=4
  setlocal softtabstop=4
  setlocal shiftwidth=4
  setlocal textwidth=79
  setlocal expandtab
  setlocal autoindent
  setlocal fileformat=unix
augroup END

" auto reload file when changed on disk
set updatetime=750
au CursorHold,FocusGained,BufEnter * checktime

" set the foldmethod to syntax for css and scss files
au FileType css,scss setlocal foldmethod=syntax

" go commands
augroup goWatcher
  au!
  au BufWritePre *.go :GoImports
  au BufWritePre *.go silent! :GoBuild
  au BufWritePre *.go silent! :!go build
augroup END

" use github flavored markdown syntax by default
augroup markdown
  au!
  au BufRead,BufNewFile *.md,*.markdown :LivedownPreview
augroup END

" use taskpaper filetype for .taskpaper.txt files
augroup taskpaper
  au! BufRead,BufNewFile *.taskpaper.txt setlocal filetype=taskpaper
augroup END

" prettydiff current file
command! PrettyDiff call PrettyDiffer()
function! PrettyDiffer()
  silent :!prettydiff %
endfunction

" open current buffer in chrome
command! -nargs=? Chrome call Chromer(<f-args>)
function! Chromer(...)
  if a:0 < 1
    silent :!open % -a Google\ Chrome
  else
    silent :exec  '!open /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --args --app=' . a:1
  endif
endfunction
" }}}

" Spaces & Tabs {{{
set tabstop=4             " number of visual spaces per TAB
set shiftwidth=2          " number of spaces to use for indent and unindent
set expandtab             " tabs are spaces
" }}}
" UI {{{

set nowrap                     " dont wrap long lines
set hidden                     " hide buffers, dont unload them, this fixes losing syntax on buffer change
set number                     " show line numbers
set relativenumber             " use relative lines
set title                      " show file name in window title
set cursorline                 " highlight line with cursor
set showmatch                  " show matching brackets
set matchpairs+=<:>            " make < and > match as well
set mouse=a                    " enable mouse for scrolling
set showcmd                    " show current command in bottom right
set laststatus=2               " always show airline
set wildmenu                   " visual autocomplete for command menu
set wildcharm=<TAB>            " auto completetion hotkey
set wildignore+=node_modules/* " ignore node modules
" set lazyredraw                 " redraw only when we need to
set list                       " show invisible characters
set listchars=tab:→\ ,trail:⋅  " list chars
set fillchars=vert:│           " set vert split character to taller line
let g:netrw_gx="<cWORD>"       " use whole words when opening URLs.



" make comments italic
autocmd ColorScheme * highlight Comment gui=italic

" change vert slpit color to same as iterm2
" the use of autocmd guarantees that it will override color scheme
autocmd ColorScheme * hi VertSplit cterm=NONE guifg=#686868

" }}}
" Splits {{{
set splitbelow   " open new splits to bottom
set splitright   " open new splits to right
" }}}
" Searching {{{
set ignorecase   " ignore case in search patterns
set smartcase    " override the 'ignorecase' option if the search pattern contains upper case characters
set incsearch    " search as characters are entered
set hlsearch     " highlight matches
" }}}
" Indenting {{{
set autoindent   " automatically set indent of new line
set smartindent  " do smart autoindenting when starting a new line
" }}}
" Folding {{{
set foldenable        " enable folding
set foldmethod=indent " fold based on indent level
set foldlevel=10      " open most folds by default
set foldnestmax=10    " 10 nested fold max
set foldclose=all
" }}}
" Misc {{{
set autoread    " auto reload changed files
set modelines=1 " check the last line for file specific settings
set path+=      " for searching
" }}}

" netrw {{{
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25
" }}}

" Deoplete {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
" make deoplete with with ultisnips
call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
" }}}
" UltiSnips  {{{

" set default shortcut
let g:UltiSnipsExpandTrigger='<tab>'

" load custom snippets location
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" }}}
" SuperTab  {{{
let g:SuperTabDefaultCompletionType = "<c-n>"
" let g:SuperTabContextDefaultCompletionType = "<c-n>"
" }}}
" Airline {{{
let g:airline_powerline_fonts=1
" let g:airline_left_sep=''
" let g:airline_right_sep=''
let g:airline_theme='gruvbox'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}

" Wakatime {{{
let g:wakatime_ScreenRedraw = 1
" }}}

" colorscheme {{{
set background=dark

if has('termguicolors')
  set termguicolors " 24-bit terminal
endif

" set a global var for custom bg color
let g:tf_background="#202020"

" set gruvbox as theme
colorscheme gruvbox

" set custom background color
hi Normal guibg=g:tf_background
hi SignColumn guibg=g:tf_background
hi CursorLine guibg=#111111

" customize matching paren colors
hi MatchParen guifg=#000000 guibg=#fc802d
" }}}

" NERDTree  {{{
map <C-n> :NERDTreeToggle<CR><c-w>=
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'
" Disable bookmarks label, and hint about '?'
let NERDTreeMinimalUI=1
" colorize full name in addition to icon
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeIgnore = ['\.DS_Store$','node_modules','\~$']
" }}}
" CtrlP {{{
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\/'
" }}}
" indent guides {{{
let g:indend_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 0
" }}}

" DelimitMate {{{
if has('nvim')
  let delimitMate_expand_cr = 1
endif
let delimitMate_expand_space = 1
" }}}

" Ack  {{{



" }}}

" General Shortcuts {{{

" make Y function like C and D
" Y(ank) not linewise
map Y y$

" remap emmet expand
imap hh <C-y>,

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" scroll the viewport faster
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>

" B and E for faster beginning and end
nnoremap B ^
nnoremap E $

" o and O will not continue comments
" nnoremap o o<Esc>^Da
" nnoremap O O<Esc>^Da

" swap directions of { and } to match up with j and k
" this is specific to my keyboard layout
nnoremap { }
nnoremap } {

" copy to clipboard
noremap YY "+y<CR>

" insert line below
nnoremap <CR><CR> o<Esc>

" redraw vim
nnoremap <C-z> :redraw!<CR>

" }}}

" Leader Shortcuts {{{

" set a map leader for more key combos
let mapleader = ','
let maplocalleader = ' '

" Livedown - markdown preview {{{
nnoremap <leader>gm :LivedownPreview<CR>
let g:instant_markdown_autostart = 1
" }}}

" create file under from path under cursor relative to current buffer
nnoremap <silent> <leader>cf :!touch %:p:h/<cfile>.scss<CR><cr>

" :Ack - find in all
" trailing space is intentional!
nnoremap <leader>gg :Ack 

" turtle.vim comment header
nnoremap <leader>ch :Commentr<CR>

" prompt to do math on word
nnoremap <leader>c viwxi<C-R>=<C-R>"
" with visual selection, do math
vnoremap <leader>c xi<C-R>=<C-R>"<CR>

" search for visual selection
vnoremap // y/<C-R>"<CR>

" maximize current pane
" make all panes equal size
let g:maximized_split = 1
function! ToggleMaximizedSplit()
  if g:maximized_split
    :exe "normal \|_"
    let g:maximized_split = 0
  else
    :exe "normal ="
    let g:maximized_split = 1
  endif
endfunction
" toggle between maximized pane, and all equal panes
nnoremap <leader>m :call ToggleMaximizedSplit()<CR>

" sassvars
nnoremap <leader>gs :e sassvars.scss<CR>:r !grep -Rh "\$\S*:" ./**/*.scss<CR>:noh<CR>

" quick quit all
nnoremap <leader>q :qa<CR>

" shortcut to save
nmap <leader>, :w<CR>

" open current dir in finder
nmap <leader>o :!open .<CR>

" run savesite in current dir
nmap <silent> <leader>k :silent !savesite<CR> :redraw!<cr>

" super save - save session in its current state, open agian with `vim -S`
nnoremap <leader>s :mksession!<CR>

" clear highlighted search term, but keep in register
nnoremap <leader><esc> :noh<CR>

" select all and copy to clipboard
nmap <leader>a :%y+<CR>

" search through tags and jump to file with with ctrl-p
nnoremap <leader>tf :CtrlPTag<CR>
" search buffers
nnoremap <leader>bf :CtrlPBuffer<CR>
" search mru
nnoremap <leader>d :CtrlPMRU<CR>
" additional shortcut for default
nnoremap <leader>f :CtrlP<CR>

" Buffer navigation
if !empty(glob("~/.dotfiles/vim.symlink/plugged/vim-bufsurf/plugin/bufsurf.vim"))
  noremap <leader>z :BufSurfBack<CR>
  noremap <leader>x :BufSurfForward<CR>
else
  noremap <leader>z :bp<CR>
  noremap <leader>x :bn<CR>
endif

" toggle sidebar
nnoremap <leader>; :SideBarEnterToggle<CR>

" tab stuff
noremap <C-t> :tabe<CR>

" close current buffer but not current window
noremap <leader>bd :bp<bar>sp<bar>bn<bar>bd<CR>

" close all buffers except the current
nnoremap <leader>bc :%bd<bar>e#<CR>

" reload vimrc file
nnoremap <leader>! :so $MYVIMRC<CR>

" reindent entire buffer
" mark cursor and put cursor back, center cursor in window
nnoremap <leader>r magg=G`azz

" move 1 line up from cursor to beginning of paragraph
" move 1 line down from cursor to end of paragraph
nnoremap gp makdd{p`ajdd}P=ip`a

" compress multiple new lines into a single new line
nnoremap <leader>cl :v_._,/./-j<CR>:noh<CR>

" mark cursor, close buffer, create new pane, open mark
nnoremap <leader>gt mAZZ<C-w>v`A

" leader w, for pane control
nnoremap <leader>w <C-w>
" focus splits with ctrl + direction
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" open file under cursor in vertical split
nnoremap <leader>wf :vertical wincmd f<CR>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>:CtrlPClearAllCaches<CR>

" Display current file in the NERDTree ont the left
nmap <silent> <leader>n :NERDTreeFind<CR><c-w>=

" open v split
nmap <leader>v :vsp<CR>
" open h split
nmap <leader>h :sp<CR>

" }}}

" Text Objects {{{
" in variable text object, includes $ before word
vnoremap iv :<C-U>silent! normal! bbve<CR>
onoremap iv :silent! normal bbve<CR>
" }}}

" Tag Shortcuts {{{

" search tag under cursor
nnoremap tt <c-]>zz
" go back to definition
nnoremap tb <c-t>
" go to next tag
nnoremap tn :tn<CR>
" go to previous tag
nnoremap tp :tp<CR>
" }}}
" Terminal Shortcuts {{{

if has('nvim')
  " make esc work like other modes
  tnoremap <Esc> <C-\><C-n>
  " nav splits like normal
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l

  " create a terminal below that is 10 high and default to insert mode
  noremap <leader>tt :10sp<CR>:terminal<CR>i

endif

" }}}

" Abbreviations {{{
abbr marign margin
abbr widht width
abbr iamges images
abbr iamge image
" }}}
