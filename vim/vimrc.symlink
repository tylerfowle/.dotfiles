" ======================================================================================================
" start plugins "
call plug#begin('~/.vim/plugged')
" colorscheme "
Plug 'exitface/synthwave.vim'
Plug 'joshdick/onedark.vim'
" utilities "
Plug 'vim-airline/vim-airline'                                " fancy statusline
Plug 'vim-airline/vim-airline-themes'
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'neomake/neomake' " neovim replacement for syntastic using neovim's job control functonality
" Plug 'scrooloose/syntastic'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-repeat'                                       " enables repeating other supported plugins with the . command
Plug 'tpope/vim-surround'                                     " ysiw to surround word
Plug 'tpope/vim-commentary'                                   " easy commenting
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons' " file drawer "
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'raimondi/delimitmate'                                   " Auto close tags
Plug 'airblade/vim-gitgutter'                                 " Shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'bronson/vim-trailing-whitespace'                        " This plugin causes all trailing whitespace to be highlighted in red.
Plug 'michalliu/sourcebeautify.vim'                           " Custom bundles
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Autocompletion engine
" Plug 'vim-scripts/HTML-AutoCloseTag' " HTML
Plug 'mattn/emmet-vim'                                        " html / templates
" Plug 'ervandew/supertab' " Perform all your vim insert mode completions with Tab
" utils and dependencies for snipmate
" Plug 'marcweber/vim-addon-mw-utils'
" Plug 'tomtom/tlib_vim'
" Plug 'garbas/vim-snipmate'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'cakebaker/scss-syntax.vim'                              " scss syntax
Plug 'evidens/vim-twig'                                       " twig syntax
Plug 'JamshedVesuna/vim-markdown-preview'                     " live markdown preview
Plug 'nathanaelkane/vim-indent-guides'                        " indent guides
" Plug 'sheerun/vim-polyglot' " language pack to rule them all
call plug#end()
" end plugins "
" ====================================================================================================== "




" options
" ====================================================================================================== "

" dont be compatible with vi
set nocompatible

" enable syntax colors
syntax on

" filetype plugin on
filetype plugin indent on
set tabstop=4
set shiftwidth=2
set expandtab
set encoding=utf8

" for searching "
set path+=

" Extended autocmpletion for commands
set wildmenu

" Autocmpletion hotkey
set wildcharm=<TAB>

" show current command in bottom right
set showcmd

" show line numbers
set number

" use relative lines
set relativenumber

" open new splits to right and bottom
set splitbelow
set splitright

" enable mouse for scrolling
set mouse=a

" Auto reload changed files
set autoread

" Show file name in window title
set title

" Highlight line with cursor
set cursorline

" Ignore case in search patterns
set ignorecase

" Automatically set indent of new line
set autoindent
set smartindent

" Override the 'ignorecase' option if the search pattern contains upper case characters
set smartcase

" Show matching brackets
set showmatch

" Make < and > match as well
set matchpairs+=<:>

" override terminal colors
set t_Co=256

" always show airline
set laststatus=2

" Lightline recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*



" Deoplete ===================================================
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
" work with snippets plz
call deoplete#custom#set('ultisnips', 'matchers', ['matcher_fuzzy'])

" UltiSnips config ===================================================
let g:UltiSnipsExpandTrigger='<tab>'
" load custom snippets location
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
let g:UltiSnipsEditSplit='vertical'

" Emmet remap ===================================================
" let g:user_emmet_leader_key='<tab>'
" let g:user_emmet_expandabbr_key='<Tab>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" remap emmet expand to hh
imap hh <C-y>,

" airline options ===================================================
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='synthwave'
let g:airline_theme='onedark'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
" let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" colorscheme ===================================================
set background=dark
colorscheme synthwave
colorscheme onedark

if has('termguicolors')
  set termguicolors " 24-bit terminal
else
  let g:synthwave_termcolors=256 " 256 color mode
endif

" Markdown Preview ===================================================
let vim_markdown_preview_hotkey='<C-m>' "remap hotkey
let vim_markdown_preview_browser='Google Chrome' "use chrome
let vim_markdown_preview_github=1  "use github flavored markdown
let vim_markdown_preview_toggle=2  "update preview on write buffer

" NERDTree settings ===================================================
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'
" Disable bookmarks label, and hint about '?'
let NERDTreeMinimalUI=1

" ctrl p settings ===================================================
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" colorize full name in addition to icon
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" indent guides ===================================================
let g:indend_guides_guide_size = 1
let g:indent_guides_color_change_percent = 2
let g:indent_guides_enable_on_vim_startup = 1

"auto reload vimrc once changed
if has("autocmd")
  autocmd! BufWritePost .vimrc source $MYVIMRC
  " This fixes the color changes and things not working :D
  autocmd! BufWritePost .vimrc filetype plugin indent on
endif


" ============================================= "
" Leader Mappings ============================= "
" ============================================= "

" set a map leader for more key combos
let mapleader = ','

" shortcut to save "
nmap <leader>, :w<cr>

" clear highlighted search term, but keep in register
nnoremap <leader><esc> :noh<cr>

" select all and yank
map <leader>a :%y+<cr>

" search through tags and jump to file with with ctrl-p
nnoremap <leader>t :CtrlPTag<cr>
" search buffers
nnoremap <leader>b :CtrlPBuffer<cr>
" additional shortcut for default
nnoremap <leader>f :CtrlP<cr>

" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>x :bn<CR>

" reload config file
nnoremap <leader>! :so $MYVIMRC<cr>

" reindent entire file
nnoremap <leader>r magg=G`az.

" leader w, for pane control
nnoremap <leader>w <C-w>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Set working directory
nnoremap <leader>. :lcd %:p:h<cr>

" Display current file in the NERDTree ont the left
nmap <silent> <leader>n :NERDTreeFind<CR>

" open v split
nmap <leader>h :vsp<cr>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ============================================= "
" Custom Mappings ============================= "
" ============================================= "

" FZF Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" FZF Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" copy to clipboard
noremap YY "+y<CR>

" insert line below
nmap <CR><CR> o<Esc>

" Buffer nav
nnoremap <space>b :Buffers<cr>
nnoremap <space>f :Files<cr>

