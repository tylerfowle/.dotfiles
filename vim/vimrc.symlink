" Tyler Fowle
" DOTFILES


source $DOTFILES/vim/config/plugins.vimrc
source $DOTFILES/vim/config/autocommands.vimrc
source $DOTFILES/vim/config/functions.vimrc


" Vars {{{

" Leader keys
let mapleader = ','
let maplocalleader = ';'

" set a global var for custom bg color
let g:tf_background="#202020"

" }}}

" General Config {{{

syntax enable             " enable syntax processing
filetype plugin on        " load filetype-specific indent files
filetype indent on
set encoding=utf8         " set encoding
set t_Co=256              " explicitly tell vim that the terminal supports 256 colors
set ttyfast               " faster redrawing
set tags=tags;            " set tags location
set iskeyword+=-          " include - in keyword matching

" }}}


" Session settings {{{

set sessionoptions-=blank
set sessionoptions-=folds
set sessionoptions-=help
set sessionoptions-=buffers

" }}}


" Spaces & Tabs {{{

set tabstop=4             " number of visual spaces per TAB
set shiftwidth=2          " number of spaces to use for indent and unindent
set expandtab             " tabs are spaces

" }}}


" UI {{{

set nowrap                     " dont wrap long lines
set hidden                     " hide buffers, dont unload them, this fixes losing syntax on buffer change
set number                     " show line numbers
set relativenumber             " use relative lines
set title                      " show file name in window title
set scrolloff=5                " keep the cursorline 5 lines away from top and bottom of screen
set cursorline                 " highlight line with cursor
set showmatch                  " show matching brackets
set matchpairs+=<:>            " make < and > match as well
set mouse=a                    " enable mouse for scrolling
set showcmd                    " show current command in bottom right
set laststatus=2               " always show airline
set wildmenu                   " visual autocomplete for command menu
set wildcharm=<TAB>            " auto completetion hotkey
set wildignore+=node_modules/* " ignore node modules
set list                       " show invisible characters
set listchars=tab:→\ ,trail:⋅  " list chars
set fillchars=vert:│           " set vert split character to taller line

" }}}


" Splits {{{
"
set splitbelow   " open new splits to bottom
set splitright   " open new splits to right

" }}}


" Searching {{{

set ignorecase   " ignore case in search patterns
set smartcase    " override the 'ignorecase' option if the search pattern contains upper case characters
set incsearch    " search as characters are entered
set hlsearch     " highlight matches

" }}}


" Indenting {{{

set autoindent   " automatically set indent of new line
set smartindent  " do smart autoindenting when starting a new line

" }}}


" Folding {{{

set foldenable        " enable folding
set foldmethod=indent " fold based on indent level
set foldlevel=10      " open most folds by default
set foldnestmax=10    " 10 nested fold max
set foldclose=all

" }}}


" Misc {{{

set autoread         " auto reload changed files
set modelines=1      " check the last line for file specific settings
set path+=build/scss " for searching

" }}}


" Filetype {{{

let g:python_highlight_all = 1

" }}}


" netrw {{{

let g:netrw_gx="<cWORD>"       " use whole words when opening URLs.
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25

" }}}


" colorscheme {{{

set background=dark

if has('termguicolors')
  set termguicolors " 24-bit terminal
endif

" set gruvbox as theme
colorscheme gruvbox

" set custom background color
if has('nvim')
  hi Normal guibg=g:tf_background
  hi SignColumn guibg=g:tf_background
endif
hi CursorLine guibg=#111111

" customize matching paren colors
hi MatchParen guifg=#000000 guibg=#fc802d
" }}}


source $DOTFILES/vim/plugins/ale.vimrc
source $DOTFILES/vim/plugins/deoplete.vimrc
source $DOTFILES/vim/plugins/jedi.vimrc
source $DOTFILES/vim/plugins/ultisnips.vimrc
source $DOTFILES/vim/plugins/supertab.vimrc
source $DOTFILES/vim/plugins/airline.vimrc
source $DOTFILES/vim/plugins/tagbar.vimrc
source $DOTFILES/vim/plugins/wakatime.vimrc
source $DOTFILES/vim/plugins/nerdtree.vimrc
source $DOTFILES/vim/plugins/ctrlp.vimrc
source $DOTFILES/vim/plugins/indent-guides.vimrc
source $DOTFILES/vim/plugins/delimitmate.vimrc
source $DOTFILES/vim/plugins/tasklist.vimrc
source $DOTFILES/vim/plugins/vim-partial.vimrc


" General Shortcuts {{{

" make Y function like C and D
" Y(ank) not linewise
map Y y$

" remap emmet expand
imap hh <C-y>,

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" scroll the viewport faster
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>

" B and E for faster beginning and end
nnoremap B ^
nnoremap E $

" swap directions of { and } to match up with j and k
" this is specific to my keyboard layout
nnoremap { }
nnoremap } {

" copy to clipboard
noremap YY "+y<CR>

" insert line below
nnoremap <CR> o<Esc>

" redraw vim
nnoremap <C-z> :redraw!<CR>

" use tab for indenting in visual mode
vnoremap <Tab> >gv|
vnoremap <S-Tab> <gv

" }}}


" Leader Shortcuts {{{


" enable folding
nnoremap <localleader><space> za

" vim plug
nnoremap <localleader>r :so $MYVIMRC<CR>
nnoremap <localleader>pu :PlugUpdate<CR>
nnoremap <localleader>pp :PlugUpgrade<CR>
nnoremap <localleader>pi :PlugInstall<CR>
nnoremap <localleader>pc :PlugClean<CR>

" Livedown - markdown preview {{{
nnoremap <localleader>m :LivedownPreview<CR>
let g:instant_markdown_autostart = 1
" }}}

" Python execution in neovim {{{
" nnoremap <leader>gp :vsp<CR>:term python2 %<CR>
nnoremap <leader>e :ExecPython<cr>
" }}}

" Ale maps {{{
nnoremap <leader>gf :ALEFix<cr>
" }}}

" Prettydiff
nnoremap <localleader>f :PrettyDiff<cr>

" create file under from path under cursor relative to current buffer
nnoremap <silent> <leader>cf :!touch %:p:h/<cfile>.scss<CR><cr>

" tagbar toggle
nnoremap <leader>tb :TagbarToggle<CR>

" :Ack - find in all
" trailing space is intentional!
nnoremap <leader>gg :Ack 


" turtle.vim comment header
nnoremap <leader>ch :Commentr<CR>

" prompt to do math on word
nnoremap <leader>c viwxi<C-R>=<C-R>"
" with visual selection, do math
vnoremap <leader>c xi<C-R>=<C-R>"<CR>

" search for visual selection
vnoremap // y/<C-R>"<CR>

" toggle between maximized pane, and all equal panes
nnoremap <leader>m :call ToggleMaximizedSplit()<CR>

" sassvars
nnoremap <leader>gs :e sassvars.scss<CR>:r !grep -Rh "\$\S*:" ./**/*.scss<CR>:noh<CR>

" quick quit all
nnoremap <leader>q :qa<CR>

" shortcut to save
nmap <leader>, :w<CR>

" open current dir in finder
nmap <leader>o :!open .<CR>

" run savesite in current dir
nmap <silent> <leader>k :silent !savesite<CR> :redraw!<cr>

" super save - save session in its current state, open agian with `vim -S`
nnoremap <leader>s :mksession!<CR>

" clear highlighted search term, but keep in register
nnoremap <leader><esc> :noh<CR>

" select all and copy to clipboard
nmap <leader>a :%y+<CR>

" CtrlP - find files
nnoremap <leader>f :CtrlP<CR>

" Buffer navigation like a browser
if !empty(glob("~/.dotfiles/vim.symlink/plugged/vim-bufsurf/plugin/bufsurf.vim"))
  noremap <leader>z :BufSurfBack<CR>
  noremap <leader>x :BufSurfForward<CR>
else
  noremap <leader>z :bp<CR>
  noremap <leader>x :bn<CR>
endif

" toggle sidebar
nnoremap <leader>; :SideBarEnterToggle<CR>

" tab stuff
noremap <C-t> :tabe<CR>

" close current buffer but not current window
noremap <leader>bd :bp<bar>sp<bar>bn<bar>bd<CR>

" close all buffers except the current
nnoremap <leader>bc :%bd<bar>e#<CR>

" reload vimrc file
nnoremap <leader>! :so $MYVIMRC<CR>

" reindent entire buffer
" mark cursor and put cursor back, center cursor in window
nnoremap <leader>r magg=G`azz

" move 1 line up from cursor to beginning of paragraph
" move 1 line down from cursor to end of paragraph
nnoremap gp makdd{p`ajdd}P=ip`a

" compress multiple new lines into a single new line
nnoremap <leader>cl :v_._,/./-j<CR>:noh<CR>

" mark cursor, close buffer, create new pane, open mark
nnoremap <leader>gt mAZZ<C-w>v`A

" leader w, for pane control
nnoremap <leader>w <C-w>
" focus splits with ctrl + direction
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" open file under cursor in vertical split
nnoremap <leader>wf :vertical wincmd f<CR>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>:CtrlPClearAllCaches<CR>

" Display current file in the NERDTree ont the left
nmap <silent> <leader>n :NERDTreeFind<CR><c-w>=

" open v split
nmap <leader>v :vsp<CR>
" open h split
nmap <leader>h :sp<CR>

" }}}
"

" Text Objects {{{
" in variable text object, includes $ before word
vnoremap iv :<C-U>silent! normal! bbve<CR>
onoremap iv :silent! normal bbve<CR>
" }}}


" Floobits shortcuts {{{
nnoremap <leader>lj :FlooJoinWorkspace https://floobits.com/tylerfowle/workspace<CR>
nnoremap <leader>ll :FlooLeaveWorkspace<CR>

nnoremap <leader>ls :FlooSummon<CR>
nnoremap <leader>lc :FlooClearHighlights<CR>

nnoremap <leader>lf :FlooFollow<CR>
nnoremap <leader>lt :FlooToggleFollowMode<CR>

nnoremap <leader>lp :FlooShareDirPrivate %<CR>
nnoremap <leader>lr :FlooRefreshWorkspace<CR>
" }}}


" Tag Shortcuts {{{

" search tag under cursor
nnoremap tt <c-]>zz
" go back to definition
nnoremap tb <c-t>
" go to next tag
nnoremap tn :tn<CR>
" go to previous tag
nnoremap tp :tp<CR>
" }}}


" Terminal Shortcuts {{{

if has('nvim')
  " make esc work like other modes
  tnoremap <Esc> <C-\><C-n>
  " nav splits like normal
  tnoremap <C-h> <C-\><C-N><C-w>h
  tnoremap <C-j> <C-\><C-N><C-w>j
  tnoremap <C-k> <C-\><C-N><C-w>k
  tnoremap <C-l> <C-\><C-N><C-w>l

  " create a terminal below that is 10 high and default to insert mode
  noremap <leader>tt :10sp<CR>:terminal<CR>i

endif
" }}}


" Abbreviations {{{
abbr marign margin
abbr widht width
abbr iamges images
abbr iamge image
abbr sectoin section
" }}}
