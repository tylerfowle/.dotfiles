" Tyler Fowle
" DOTFILES

source $DOTFILES/vim/config/plugins.vimrc
source $DOTFILES/vim/config/autocommands.vimrc
source $DOTFILES/vim/config/functions.vimrc
source $DOTFILES/vim/config/filetypes.vimrc

let g:python3_host_prog='/opt/homebrew/bin/python3'
let g:python_host_prog='/usr/bin/python'


source $DOTFILES/vim/config/vars.vimrc
source $DOTFILES/vim/config/general.vimrc


" Session settings {{{

set sessionoptions-=blank
set sessionoptions-=folds
set sessionoptions-=help
set sessionoptions-=buffers

" }}}


" Spaces & Tabs {{{

set tabstop=4             " number of visual spaces per TAB
set shiftwidth=4          " number of spaces to use for indent and unindent
set expandtab             " tabs are spaces

" }}}


source $DOTFILES/vim/config/ui.vimrc


" Misc {{{

set autoread         " auto reload changed files
set modelines=1      " check the last line for file specific settings

set path+=build/scss " for searching
set path+=./*-website-*/**/ " for searching
set path+=app/assets/**/* " for searching
set path+=./**/

" }}}


" Filetype {{{

let g:python_highlight_all = 1

" }}}



source $DOTFILES/vim/config/netrw.vimrc

" Plugins {{{

source $DOTFILES/vim/plugins/ale.vimrc
source $DOTFILES/vim/plugins/coc.vimrc
" source $DOTFILES/vim/plugins/deoplete.vimrc
" source $DOTFILES/vim/plugins/jedi.vimrc
source $DOTFILES/vim/plugins/ultisnips.vimrc
source $DOTFILES/vim/plugins/gitgutter.vimrc
source $DOTFILES/vim/plugins/supertab.vimrc
source $DOTFILES/vim/plugins/airline.vimrc
source $DOTFILES/vim/plugins/tagbar.vimrc
source $DOTFILES/vim/plugins/wakatime.vimrc
" source $DOTFILES/vim/plugins/nerdtree.vimrc
source $DOTFILES/vim/plugins/ctrlp.vimrc
source $DOTFILES/vim/plugins/indent-guides.vimrc
source $DOTFILES/vim/plugins/delimitmate.vimrc
source $DOTFILES/vim/plugins/tasklist.vimrc
source $DOTFILES/vim/plugins/vim-partial.vimrc
source $DOTFILES/vim/plugins/neoformat.vimrc
source $DOTFILES/vim/plugins/vista.vimrc

" }}}


" Keymaps {{{

source $DOTFILES/vim/keymaps/general.vimrc
source $DOTFILES/vim/keymaps/leader.vimrc
source $DOTFILES/vim/keymaps/terminal.vimrc

" }}}


source $DOTFILES/vim/config/colorscheme.vimrc






" TEMP {{{

let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path '**/node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
let $FZF_DEFAULT_OPTS=' --color=dark --color=fg:15,bg:-1,hl:1,fg+:#ffffff,bg+:0,hl+:1 --color=info:0,prompt:0,pointer:12,marker:4,spinner:11,header:-1 --layout=reverse  --margin=1,4'
let g:fzf_layout = { 'window': 'call FloatingFZF()' }

function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, '&signcolumn', 'no')

  let height = float2nr(20)
  let width = float2nr(160)
  let horizontal = float2nr((&columns - width) / 2)
  let vertical = 1

  let opts = {
        \ 'relative': 'editor',
        \ 'row': vertical,
        \ 'col': horizontal,
        \ 'width': width,
        \ 'height': height,
        \ 'style': 'minimal'
        \ }

  call nvim_open_win(buf, v:true, opts)
endfunction

nnoremap <silent> <space>z :call fzf#vim#files('.', {'options': '--prompt ""'})<CR>
nnoremap <silent> <space>a :Buffers<CR>

" rerun last colon command
nnoremap ;; @:
" }}}




nnoremap <space>v :!rg --files --hidden -g "\!.git/*" > files.cache<cr>


let g:fzf_layout = { 'window': 'call CreateCenteredFloatingWindow()' }
let $FZF_DEFAULT_OPTS="--reverse " " top to bottom

" use rg by default
if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'cat files.cache'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" floating fzf window with borders
function! CreateCenteredFloatingWindow()
    let width = min([&columns - 4, max([80, &columns - 20])])
    let height = min([&lines - 4, max([20, &lines - 10])])
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = "╭" . repeat("─", width - 2) . "╮"
    let mid = "│" . repeat(" ", width - 2) . "│"
    let bot = "╰" . repeat("─", width - 2) . "╯"
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
    set winhl=Normal:Floating
    let opts.row += 1
    let opts.height -= 2
    let opts.col += 2
    let opts.width -= 4
    call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    au BufWipeout <buffer> exe 'bw '.s:buf
endfunction

" Files + devicons + floating fzf
function! Fzf_dev()
    let l:fzf_files_options = '--preview "bat --theme="gruvbox" --style=numbers,changes --color always {2..-1} | head -'.&lines.'"'
  function! s:files()
    let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(l:files)
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(item)
    let l:pos = stridx(a:item, ' ')
    let l:file_path = a:item[pos+1:-1]
    execute 'silent e' l:file_path
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink':   function('s:edit_file'),
        \ 'options': '-m --reverse ' . l:fzf_files_options,
        \ 'down':    '40%',
        \ 'window': 'call CreateCenteredFloatingWindow()'})

endfunction

nnoremap <silent> <space>x :call Fzf_dev()<CR>
