" Tyler Fowle

" Plugins {{{
" ========================================================================================================
call plug#begin('~/.vim/plugged')
" Colorscheme {{{
Plug 'exitface/synthwave.vim'
Plug 'joshdick/onedark.vim'
" }}}
" UI {{{
Plug 'nathanaelkane/vim-indent-guides' " indent guides
Plug 'vim-airline/vim-airline'         " fancy statusline
Plug 'vim-airline/vim-airline-themes'  " themes for airline
Plug 'airblade/vim-gitgutter'          " Shows a git diff in the gutter (sign column) and stages/undoes hunks.
" Plug 'majutsushi/tagbar'               " shows tags in a sidebar
Plug 'junegunn/vim-peekaboo'           " shows registers in a sidebar
" }}}
" Utilities {{{
Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'         " ga to align by character
Plug 'tpope/vim-repeat'                " enables repeating other supported plugins with the . command
Plug 'tpope/vim-surround'              " ysiw to surround word
Plug 'tpope/vim-commentary'            " easy commenting
Plug 'raimondi/delimitmate'            " Auto close tags
Plug 'bronson/vim-trailing-whitespace' " This plugin causes all trailing whitespace to be highlighted in red.
Plug 'google/vim-searchindex'          " show search position among all results
Plug 'triglav/vim-visual-increment'    " use ctrl a/v to increment.decrement a visually selected block
" }}}
" Syntax engines {{{
" Plug 'neomake/neomake' " neovim replacement for syntastic using neovim's job control functonality
" Plug 'scrooloose/syntastic'
Plug 'w0rp/ale'
" }}}
" Syntax support {{{
Plug 'othree/html5.vim'                                       " html5 syntax
Plug 'cakebaker/scss-syntax.vim'                              " scss syntax
Plug 'lumiliet/vim-twig'                                      " twig syntax
Plug 'jtratner/vim-flavored-markdown'                         " markdown syntax
Plug 'JamshedVesuna/vim-markdown-preview'                     " live markdown preview
Plug 'vim-utils/vim-troll-stopper'                            " Detect unicode characters
" }}}
" NERDTree {{{
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons' " file drawer "
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" }}}
" Auto Complete {{{
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Autocompletion engine
Plug 'mattn/emmet-vim' " html / templates
" }}}
" Snippets {{{
Plug 'sirver/ultisnips'                                       " snippet engine
Plug 'honza/vim-snippets'                                     " alot of base snippets
" }}}
" NOT USING {{{
" Plug 'ervandew/supertab' " Perform all your vim insert mode completions with Tab
" Plug 'michalliu/sourcebeautify.vim' " Custom bundles
" }}}
call plug#end()
" ========================================================================================================
" }}}
" General Config {{{
set nocompatible          " dont try to be compatible with vi
syntax enable             " enable syntax processing
filetype plugin on        " load filetype-specific indent files
filetype indent on
set encoding=utf8         " set encoding
set t_Co=256              " explicitly tell vim that the terminal supports 256 colors
set ttyfast               " faster redrawing
set tags=./tags;
set iskeyword+=-          " include - in keyword matching
" }}}
" Autocommands {{{

" regenerate ctags on save
autocmd BufWritePre * silent! !ctags -R --exclude=.git --exclude=node_modules . >/dev/null 2>&1

" use github flavored markdown syntax by default
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" }}}
" Spaces & Tabs {{{
set tabstop=4             " number of visual spaces per TAB
set shiftwidth=2          " number of spaces to use for indent and unindent
set expandtab             " tabs are spaces
" }}}
" UI {{{
set nowrap                    " dont wrap long lines
set hidden                    " hide buffers, dont unload them, this fixes losing syntax on buffer change
set number                    " show line numbers
set relativenumber            " use relative lines
set title                     " show file name in window title
set cursorline                " highlight line with cursor
set showmatch                 " show matching brackets
set matchpairs+=<:>           " make < and > match as well
set mouse=a                   " enable mouse for scrolling
set showcmd                   " show current command in bottom right
set laststatus=2              " always show airline
set wildmenu                  " visual autocomplete for command menu
set wildcharm=<TAB>           " auto completetion hotkey
" set lazyredraw                " redraw only when we need to
set list                      " show invisible characters
set listchars=tab:→\ ,trail:⋅ " list chars
set fillchars=vert:│          " set vert split character to taller line
" }}}
" Splits {{{
set splitbelow " open new splits to bottom
set splitright " open new splits to right
" }}}
" Searching {{{
set ignorecase " ignore case in search patterns
set smartcase       " override the 'ignorecase' option if the search pattern contains upper case characters
set incsearch  " search as characters are entered
set hlsearch   " highlight matches
" }}}
" Indeting {{{
set autoindent  " automatically set indent of new line
set smartindent " do smart autoindenting when starting a new line
" }}}
" Folding {{{
set foldenable       " enable folding
set foldmethod=indent " fold based on indent level
set foldlevel=10      " open most folds by default
set foldnestmax=10    " 10 nested fold max
set foldclose=all
" }}}
" Misc {{{
set autoread    " auto reload changed files
set modelines=1 " check the last line for file specific settings
set path+=      " for searching
" }}}

" Deoplete {{{
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
" make deoplete with with ultisnips
call deoplete#custom#set('ultisnips', 'matchers', ['matcher_fuzzy'])
" }}}
" UltiSnips  {{{
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" load custom snippets location
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
let g:UltiSnipsEditSplit='vertical'
" }}}
" Airline {{{
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='synthwave'
let g:airline_theme='onedark'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}
" colorscheme {{{
set background=dark
" colorscheme synthwave
colorscheme onedark

if has('termguicolors')
  set termguicolors " 24-bit terminal
else
  let g:synthwave_termcolors=256 " 256 color mode
endif
" }}}

" Vim Markdown Preview {{{
let vim_markdown_preview_hotkey='<C-m>'          " remap hotkey
let vim_markdown_preview_browser='Google Chrome' " use chrome
let vim_markdown_preview_github=1                " use github flavored markdown
let vim_markdown_preview_toggle=1                " update preview on write buffer
" }}}
" NERDTree  {{{
map <C-n> :NERDTreeToggle<CR><c-w>=
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'
" Disable bookmarks label, and hint about '?'
let NERDTreeMinimalUI=1
" colorize full name in addition to icon
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
" }}}
" CtrlP {{{
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
" }}}
" indent guides {{{
let g:indend_guides_guide_size = 1
let g:indent_guides_color_change_percent = 2
let g:indent_guides_enable_on_vim_startup = 1
" }}}
" DelimitMate {{{
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
" }}}

" General Shortcuts {{{

" make Y function like C and D
" Y(ank) not linewise
map Y y$

" remap emmet expand
imap hh <C-y>,

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" B and E for faster beginning and end
nnoremap B ^
nnoremap E $

" copy to clipboard
noremap YY "+y<CR>

" insert line below
nnoremap <CR><CR> o<Esc>

" redraw vim
nnoremap <C-z> :redraw!<cr>

" show tagbar
nnoremap <c-b> :TagbarToggle<cr>

" }}}
" Leader Shortcuts {{{

" set a map leader for more key combos
let mapleader = ','

" shortcut to save "
nmap <leader>, :w<cr>

" super save - save session in its current state, open agian with `vim -S`
nnoremap <leader>s :mksession!<CR>

" clear highlighted search term, but keep in register
nnoremap <leader><esc> :noh<cr>

" select all and copy to clipboard
nmap <leader>a :%y+<cr>

" search through tags and jump to file with with ctrl-p
nnoremap <leader>tf :CtrlPTag<cr>
" search buffers
nnoremap <leader>bf :CtrlPBuffer<cr>
" additional shortcut for default
nnoremap <leader>f :CtrlP<cr>

" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>x :bn<CR>

" close current buffer but not current window
noremap <leader>bd :bp<bar>sp<bar>bn<bar>bd<CR>

" reload vimrc file
nnoremap <leader>! :so $MYVIMRC<cr>

" reindent entire file
" mark cursor and put cursor back, center cursor in window
nnoremap <leader>r magg=G`az.

" leader w, for pane control
nnoremap <leader>w <C-w>
" focus splits with ctrl + direction
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Set working directory
nnoremap <leader>. :lcd %:p:h<cr>

" Display current file in the NERDTree ont the left
nmap <silent> <leader>n :NERDTreeFind<CR><c-w>=

" open v split
nmap <leader>h :vsp<cr>

" }}}
" FZF Shortcuts {{{
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" FZF Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)
" }}}
" Tag Shortcuts {{{

" search tag under cursor
nnoremap ts <c-]>z.
" go back to definition
nnoremap tt <c-t>
" go to next tag
nnoremap tn :tn<cr>
" go to previous tag
nnoremap tp :tp<cr>
" }}}
" Terminal Shortcuts {{{

" make esc work like other modes
tnoremap <Esc> <C-\><C-n>
" nav splits like normal
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l

" }}}

" vim:foldmethod=marker:foldlevel=0
