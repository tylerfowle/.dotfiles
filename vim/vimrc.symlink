" Tyler Fowle
" DOTFILES

source $DOTFILES/vim/config/plugins.vimrc
source $DOTFILES/vim/config/autocommands.vimrc
source $DOTFILES/vim/config/functions.vimrc
source $DOTFILES/vim/config/filetypes.vimrc

let g:python3_host_prog='/opt/homebrew/bin/python3'
let g:python_host_prog='/usr/bin/python'


" Vars {{{

" Leader keys
let mapleader = ','
let maplocalleader = ';'

" set a global var for custom bg color
let g:tf_background="#202020"

" }}}

" General Config {{{

syntax enable             " enable syntax processing
filetype plugin on        " load filetype-specific indent files
filetype indent on
set encoding=utf8         " set encoding
set t_Co=256              " explicitly tell vim that the terminal supports 256 colors
set ttyfast               " faster redrawing
set tags=tags;            " set tags location
set iskeyword+=-          " include - in keyword matching

" Set to local dir for faster network editing
set directory^=$HOME/nvim/tmp
set backupdir^=$HOME/nvim/tmp

" }}}


" macvim settings {{{

if has('gui_macvim')
  set guioptions=
  set guifont=Fira\ Mono:h12
endif

" }}}


" Session settings {{{

set sessionoptions-=blank
set sessionoptions-=folds
set sessionoptions-=help
set sessionoptions-=buffers

" }}}


" Spaces & Tabs {{{

set tabstop=4             " number of visual spaces per TAB
set shiftwidth=4          " number of spaces to use for indent and unindent
set expandtab             " tabs are spaces

" }}}


" UI {{{

set nowrap                     " dont wrap long lines
set hidden                     " hide buffers, dont unload them, this fixes losing syntax on buffer change
set number                     " show line numbers
set relativenumber             " use relative lines
set title                      " show file name in window title
set scrolloff=5                " keep the cursorline 5 lines away from top and bottom of screen
set cursorline                 " highlight line with cursor
set showmatch                  " show matching brackets
set matchpairs+=<:>            " make < and > match as well
set mouse=a                    " enable mouse for scrolling
set showcmd                    " show current command in bottom right
set laststatus=2               " always show airline
set wildmenu                   " visual autocomplete for command menu
set wildcharm=<TAB>            " auto completetion hotkey
set wildignore+=node_modules/* " ignore node modules
set list                       " show invisible characters
set listchars=tab:→\ ,trail:⋅  " list chars
set fillchars=vert:│           " set vert split character to taller line

" }}}


" Splits {{{

set splitbelow   " open new splits to bottom
set splitright   " open new splits to right

" }}}


" Searching {{{

set ignorecase   " ignore case in search patterns
set smartcase    " override the 'ignorecase' option if the search pattern contains upper case characters
set incsearch    " search as characters are entered
set hlsearch     " highlight matches

" }}}


" Indenting {{{

set autoindent   " automatically set indent of new line
set smartindent  " do smart autoindenting when starting a new line

" }}}


" Folding {{{

set foldenable        " enable folding
set foldmethod=indent " fold based on indent level
set foldlevel=10      " open most folds by default
set foldnestmax=10    " 10 nested fold max
set foldclose=all

" }}}


" Misc {{{

set autoread         " auto reload changed files
set modelines=1      " check the last line for file specific settings

set path+=build/scss " for searching
set path+=./*-website-*/**/ " for searching
set path+=app/assets/**/* " for searching
set path+=./**/

" }}}


" Filetype {{{

let g:python_highlight_all = 1

" }}}


" netrw {{{

let g:netrw_gx="<cWORD>"   " use whole words when opening URLs.
let g:netrw_liststyle = 3
let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_winsize = 25

" }}}


" imports {{{

source $DOTFILES/vim/plugins/ale.vimrc
source $DOTFILES/vim/plugins/coc.vimrc
" source $DOTFILES/vim/plugins/deoplete.vimrc
" source $DOTFILES/vim/plugins/jedi.vimrc
source $DOTFILES/vim/plugins/ultisnips.vimrc
source $DOTFILES/vim/plugins/gitgutter.vimrc
source $DOTFILES/vim/plugins/supertab.vimrc
source $DOTFILES/vim/plugins/airline.vimrc
source $DOTFILES/vim/plugins/tagbar.vimrc
source $DOTFILES/vim/plugins/wakatime.vimrc
" source $DOTFILES/vim/plugins/nerdtree.vimrc
source $DOTFILES/vim/plugins/ctrlp.vimrc
source $DOTFILES/vim/plugins/indent-guides.vimrc
source $DOTFILES/vim/plugins/delimitmate.vimrc
source $DOTFILES/vim/plugins/tasklist.vimrc
source $DOTFILES/vim/plugins/vim-partial.vimrc
source $DOTFILES/vim/plugins/neoformat.vimrc
source $DOTFILES/vim/plugins/vista.vimrc

source $DOTFILES/vim/keymaps/general.vimrc
source $DOTFILES/vim/keymaps/leader.vimrc
source $DOTFILES/vim/keymaps/terminal.vimrc

" }}}


" colorscheme {{{

set background=dark

if has('termguicolors')
  set termguicolors " 24-bit terminal
endif

" set gruvbox as theme
colorscheme gruvbox

" set custom background color
if has('nvim')
  hi Normal guibg=g:tf_background
  hi SignColumn guibg=g:tf_background
  " hi CursorLine guibg=g:tf_background
  hi Folded guibg=g:tf_background
  " customize matching paren colors
  hi MatchParen guifg=#000000 guibg=#fc802d
endif

" limelight colors
let g:limelight_conceal_ctermfg = '#555555'
let g:limelight_conceal_guifg = '#555555'

" }}}


" markdown highlight syntax overrides {{{

hi! link htmlH1 GruvboxGreenBold
hi! link htmlH2 GruvboxPurpleBold
hi! link htmlH3 GruvboxAquaBold
hi! link htmlH4 GruvboxYellowBold
hi! link htmlH5 GruvboxOrangeBold
hi! link htmlH6 GruvboxRedBold

" }}}

" custom markdown highlighting
au FileType markdown :silent! call matchadd('GruvboxGreenBold', 'DONE')
au FileType markdown :silent! call matchadd('GruvboxYellowBold', 'TODO')

" Abbreviations {{{

abbr marign margin
abbr widht width
abbr iamges images
abbr iamge image
abbr sectoin section
abbr accordian accordion

" }}}









" TEMP {{{

let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path '**/node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
let $FZF_DEFAULT_OPTS=' --color=dark --color=fg:15,bg:-1,hl:1,fg+:#ffffff,bg+:0,hl+:1 --color=info:0,prompt:0,pointer:12,marker:4,spinner:11,header:-1 --layout=reverse  --margin=1,4'
let g:fzf_layout = { 'window': 'call FloatingFZF()' }

function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, '&signcolumn', 'no')

  let height = float2nr(20)
  let width = float2nr(160)
  let horizontal = float2nr((&columns - width) / 2)
  let vertical = 1

  let opts = {
        \ 'relative': 'editor',
        \ 'row': vertical,
        \ 'col': horizontal,
        \ 'width': width,
        \ 'height': height,
        \ 'style': 'minimal'
        \ }

  call nvim_open_win(buf, v:true, opts)
endfunction

nnoremap <silent> <space>z :call fzf#vim#files('.', {'options': '--prompt ""'})<CR>
nnoremap <silent> <space>a :Buffers<CR>

" rerun last colon command
nnoremap ;; @:
" }}}




nnoremap <space>v :!rg --files --hidden -g "\!.git/*" > files.cache<cr>


let g:fzf_layout = { 'window': 'call CreateCenteredFloatingWindow()' }
let $FZF_DEFAULT_OPTS="--reverse " " top to bottom

" use rg by default
if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'cat files.cache'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" floating fzf window with borders
function! CreateCenteredFloatingWindow()
    let width = min([&columns - 4, max([80, &columns - 20])])
    let height = min([&lines - 4, max([20, &lines - 10])])
    let top = ((&lines - height) / 2) - 1
    let left = (&columns - width) / 2
    let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

    let top = "╭" . repeat("─", width - 2) . "╮"
    let mid = "│" . repeat(" ", width - 2) . "│"
    let bot = "╰" . repeat("─", width - 2) . "╯"
    let lines = [top] + repeat([mid], height - 2) + [bot]
    let s:buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
    call nvim_open_win(s:buf, v:true, opts)
    set winhl=Normal:Floating
    let opts.row += 1
    let opts.height -= 2
    let opts.col += 2
    let opts.width -= 4
    call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
    au BufWipeout <buffer> exe 'bw '.s:buf
endfunction

" Files + devicons + floating fzf
function! Fzf_dev()
    let l:fzf_files_options = '--preview "bat --theme="gruvbox" --style=numbers,changes --color always {2..-1} | head -'.&lines.'"'
  function! s:files()
    let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(l:files)
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(item)
    let l:pos = stridx(a:item, ' ')
    let l:file_path = a:item[pos+1:-1]
    execute 'silent e' l:file_path
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink':   function('s:edit_file'),
        \ 'options': '-m --reverse ' . l:fzf_files_options,
        \ 'down':    '40%',
        \ 'window': 'call CreateCenteredFloatingWindow()'})

endfunction

nnoremap <silent> <space>x :call Fzf_dev()<CR>
