" check whether vim-plug is installed and install it if necessary "
let plugpath = expand('<sfile>:p:h'). '/autoload/plug.vim'
if !filereadable(plugpath)
    if executable('curl')
        let plugurl = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        call system('curl -fLo ' . shellescape(plugpath) . ' --create-dirs ' . plugurl)
        if v:shell_error
            echom "Error downloading vim-plug. Please install it manually.\n"
            exit
        endif
    else
        echom "vim-plug not installed. Please install it manually or install curl.\n"
        exit
    endif
endif


" ====================================================================================================== "
" start plugins "
call plug#begin('~/.vim/plugged')

" colorscheme "
Plug 'joshdick/onedark.vim'
Plug 'chriskempson/base16-vim'
Plug 'colepeters/spacemacs-theme.vim'
Plug 'exitface/synthwave.vim'

" utilities "
Plug 'vim-airline/vim-airline' " fancy statusline "
Plug 'vim-airline/vim-airline-themes'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'neomake/neomake' " neovim replacement for syntastic using neovim's job control functonality "
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim' " fuzzy file finder and so much more "
Plug 'tpope/vim-repeat' " enables repeating other supported plugins with the . command "
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'ervandew/supertab' " Perform all your vim insert mode completions with Tab "
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } 
Plug 'Xuyuanp/nerdtree-git-plugin' 
Plug 'ryanoasis/vim-devicons' " file drawer "

" html / templates "
Plug 'mattn/emmet-vim', {'for': 'html'}
Plug 'marcweber/vim-addon-mw-utils' " interpret a file by function and cache file automatically - snipmate dependancies "
Plug 'tomtom/tlib_vim' " utility functions for vim "
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

" scss "
Plug 'cakebaker/scss-syntax.vim'



call plug#end()
" end plugins "
" ====================================================================================================== "


" options "
" dont be compatible with vi "
set nocompatible
" enable syntax colors "
syntax enable

filetype plugin on
set tabstop=4
set shiftwidth=2
set expandtab

" for searching "
set path+=
set wildmenu

" show current command in bottom right "
set showcmd

" show line numbers and use relative lines "
set number
set relativenumber

" override terminal colors =================================================== "
:set t_Co=256

set laststatus=2

" syntastic recommended settings =================================================== "
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" airline options ================================ "
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='synthwave'
let g:airline#extensions#tabline#enabled = 1 " enable airline tabline
let g:airline#extensions#tabline#tab_min_count = 2 " only show tabline if tabs are being used (more than 1 tab open)
let g:airline#extensions#tabline#show_buffers = 0 " do not show open buffers in tabline
let g:airline#extensions#tabline#show_splits = 0

" colorscheme =================================================== "
set background=dark
color synthwave
if has('termguicolors')
  set termguicolors " 24-bit terminal
else
  let g:synthwave_termcolors=256 " 256 color mode
endif


" NERDTree settings =================================================== "
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'

" ctrl p settings =================================================== "
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'


" Custom Mappings ============================= "
" set a map leader for more key combos "
let mapleader = ','

" shortcut to save "
nmap <leader>, :w<cr>

" scroll the viewport faster "
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
